"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setup = void 0;
const isPlainObject_1 = __importDefault(require("lodash/isPlainObject"));
const puppeteer_core_1 = __importDefault(require("puppeteer-core"));
const util_1 = require("./util");
const activateMainTab_1 = require("./activateMainTab");
function messageHandlerError(err) {
    const errObject = {};
    if (typeof err === 'string') {
        errObject.message = err;
    }
    else if (typeof err === 'object') {
        Object.assign(errObject, {
            name: err.name,
            message: err.message,
            stack: err.stack,
        });
    }
    else {
        errObject.message = err;
    }
    return {
        __error__: errObject,
    };
}
function setup(options) {
    if (!options) {
        throw (0, util_1.pluginError)('Must provide options argument to `setup`.');
    }
    if (!(0, isPlainObject_1.default)(options)) {
        throw (0, util_1.pluginError)('The options argument provided to `setup` must be an object.');
    }
    if (!options.on) {
        throw (0, util_1.pluginError)('Must provide `on` function to `setup`.');
    }
    if (typeof options.on !== 'function') {
        throw (0, util_1.pluginError)('The `on` option provided to `setup` must be a function.');
    }
    if (!options.onMessage) {
        throw (0, util_1.pluginError)('Must provide `onMessage` object to `setup`.');
    }
    if (!(0, isPlainObject_1.default)(options.onMessage)) {
        throw (0, util_1.pluginError)('The `onMessage` option provided to `setup` must be an object.');
    }
    const puppeteer = options.puppeteer || puppeteer_core_1.default;
    let cypressBrowser;
    let debuggerUrl;
    try {
        options.on('after:browser:launch', (browser, options) => {
            cypressBrowser = browser;
            debuggerUrl = options.webSocketDebuggerUrl;
        });
    }
    catch (err) {
        throw (0, util_1.pluginError)(`Could not set up \`after:browser:launch\` task. Ensure you are running Cypress >= 13.6.0. The following error was encountered:\n\n${err.stack}`);
    }
    options.on('task', {
        async __cypressPuppeteer__({ name, args }) {
            if (!cypressBrowser) {
                return messageHandlerError((0, util_1.pluginError)(`Lost the reference to the browser. This usually occurs because the Cypress config was reloaded without the browser re-launching. Close and re-open the browser.`));
            }
            if (cypressBrowser.family !== 'chromium') {
                return messageHandlerError((0, util_1.pluginError)(`Only browsers in the "Chromium" family are supported. You are currently running a browser with the family: ${cypressBrowser.family}`));
            }
            const messageHandler = options.onMessage[name];
            if (!messageHandler) {
                return messageHandlerError((0, util_1.pluginError)(`Could not find message handler with the name \`${name}\`. Registered message handler names are: ${Object.keys(options.onMessage).join(', ')}.`));
            }
            const handlerType = typeof messageHandler;
            if (handlerType !== 'function') {
                return messageHandlerError((0, util_1.pluginError)(`Message handlers must be functions, but the message handler for the name \`${name}\` was type \`${handlerType}\`.`));
            }
            let browser;
            try {
                browser = await puppeteer.connect({
                    browserWSEndpoint: debuggerUrl,
                    defaultViewport: null,
                });
            }
            catch (err) {
                return messageHandlerError(err);
            }
            let result;
            let error;
            try {
                result = await messageHandler(browser, ...args);
            }
            catch (err) {
                error = err;
            }
            finally {
                // - Only implemented for Chromium right now. Support for Firefox/webkit
                //   could be added later
                // - Electron doesn't have tabs
                // - Focus doesn't matter for headless browsers and old headless Chrome
                //   doesn't run the extension
                const isHeadedChromium = cypressBrowser.isHeaded && cypressBrowser.family === 'chromium' && cypressBrowser.name !== 'electron';
                if (isHeadedChromium) {
                    try {
                        await (0, activateMainTab_1.activateMainTab)(browser);
                    }
                    catch (e) {
                        return messageHandlerError((0, util_1.pluginError)('Cannot communicate with the Cypress Chrome extension. Ensure the extension is enabled when using the Puppeteer plugin.'));
                    }
                }
                await browser.disconnect();
            }
            if (error) {
                return messageHandlerError(error);
            }
            // cy.task() errors if `undefined` is returned, so return null in that case
            return result === undefined ? null : result;
        },
    });
}
exports.setup = setup;
